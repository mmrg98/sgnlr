{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\n\nvar HandshakeProtocol =\n/** @class */\nfunction () {\n  function HandshakeProtocol() {} // Handshake request is always JSON\n\n\n  HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {\n    return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  };\n\n  HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {\n    var responseMessage;\n    var messageData;\n    var remainingData;\n\n    if (isArrayBuffer(data)) {\n      // Format is binary but still need to read JSON text from handshake response\n      var binaryData = new Uint8Array(data);\n      var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      var responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      var textData = data;\n      var separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      var responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    } // At this point we should have just the single handshake message\n\n\n    var messages = TextMessageFormat.parse(messageData);\n    responseMessage = JSON.parse(messages[0]); // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n\n    return [remainingData, responseMessage];\n  };\n\n  return HandshakeProtocol;\n}();\n\nexport { HandshakeProtocol };","map":{"version":3,"names":["TextMessageFormat","isArrayBuffer","HandshakeProtocol","prototype","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","data","responseMessage","messageData","remainingData","binaryData","Uint8Array","separatorIndex","indexOf","RecordSeparatorCode","Error","responseLength","String","fromCharCode","apply","slice","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse"],"sources":["C:/Users/LENOVO/Desktop/Eltizam/Projects/SignalR Pro/sgnlrClient/node_modules/@aspnet/signalr/dist/esm/HandshakeProtocol.js"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nvar HandshakeProtocol = /** @class */ (function () {\r\n    function HandshakeProtocol() {\r\n    }\r\n    // Handshake request is always JSON\r\n    HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    };\r\n    HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {\r\n        var responseMessage;\r\n        var messageData;\r\n        var remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            var binaryData = new Uint8Array(data);\r\n            var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            var responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            var textData = data;\r\n            var separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            var responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        var messages = TextMessageFormat.parse(messageData);\r\n        responseMessage = JSON.parse(messages[0]);\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    };\r\n    return HandshakeProtocol;\r\n}());\r\nexport { HandshakeProtocol };\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA;;AACA,IAAIC,iBAAiB;AAAG;AAAe,YAAY;EAC/C,SAASA,iBAAT,GAA6B,CAC5B,CAF8C,CAG/C;;;EACAA,iBAAiB,CAACC,SAAlB,CAA4BC,qBAA5B,GAAoD,UAAUC,gBAAV,EAA4B;IAC5E,OAAOL,iBAAiB,CAACM,KAAlB,CAAwBC,IAAI,CAACC,SAAL,CAAeH,gBAAf,CAAxB,CAAP;EACH,CAFD;;EAGAH,iBAAiB,CAACC,SAAlB,CAA4BM,sBAA5B,GAAqD,UAAUC,IAAV,EAAgB;IACjE,IAAIC,eAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,aAAJ;;IACA,IAAIZ,aAAa,CAACS,IAAD,CAAjB,EAAyB;MACrB;MACA,IAAII,UAAU,GAAG,IAAIC,UAAJ,CAAeL,IAAf,CAAjB;MACA,IAAIM,cAAc,GAAGF,UAAU,CAACG,OAAX,CAAmBjB,iBAAiB,CAACkB,mBAArC,CAArB;;MACA,IAAIF,cAAc,KAAK,CAAC,CAAxB,EAA2B;QACvB,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;MACH,CANoB,CAOrB;MACA;;;MACA,IAAIC,cAAc,GAAGJ,cAAc,GAAG,CAAtC;MACAJ,WAAW,GAAGS,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCT,UAAU,CAACU,KAAX,CAAiB,CAAjB,EAAoBJ,cAApB,CAAhC,CAAd;MACAP,aAAa,GAAIC,UAAU,CAACW,UAAX,GAAwBL,cAAzB,GAA2CN,UAAU,CAACU,KAAX,CAAiBJ,cAAjB,EAAiCM,MAA5E,GAAqF,IAArG;IACH,CAZD,MAaK;MACD,IAAIC,QAAQ,GAAGjB,IAAf;MACA,IAAIM,cAAc,GAAGW,QAAQ,CAACV,OAAT,CAAiBjB,iBAAiB,CAAC4B,eAAnC,CAArB;;MACA,IAAIZ,cAAc,KAAK,CAAC,CAAxB,EAA2B;QACvB,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;MACH,CALA,CAMD;MACA;;;MACA,IAAIC,cAAc,GAAGJ,cAAc,GAAG,CAAtC;MACAJ,WAAW,GAAGe,QAAQ,CAACE,SAAT,CAAmB,CAAnB,EAAsBT,cAAtB,CAAd;MACAP,aAAa,GAAIc,QAAQ,CAACG,MAAT,GAAkBV,cAAnB,GAAqCO,QAAQ,CAACE,SAAT,CAAmBT,cAAnB,CAArC,GAA0E,IAA1F;IACH,CA5BgE,CA6BjE;;;IACA,IAAIW,QAAQ,GAAG/B,iBAAiB,CAACgC,KAAlB,CAAwBpB,WAAxB,CAAf;IACAD,eAAe,GAAGJ,IAAI,CAACyB,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAnB,CAAlB,CA/BiE,CAgCjE;IACA;;IACA,OAAO,CAAClB,aAAD,EAAgBF,eAAhB,CAAP;EACH,CAnCD;;EAoCA,OAAOT,iBAAP;AACH,CA5CsC,EAAvC;;AA6CA,SAASA,iBAAT"},"metadata":{},"sourceType":"module"}