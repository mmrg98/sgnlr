{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\n\nvar HubConnectionBuilder =\n/** @class */\nfunction () {\n  function HubConnectionBuilder() {}\n\n  HubConnectionBuilder.prototype.configureLogging = function (logging) {\n    Arg.isRequired(logging, \"logging\");\n\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n\n    return this;\n  };\n\n  HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    this.url = url; // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = transportTypeOrOptions;\n    } else {\n      this.httpConnectionOptions = {\n        transport: transportTypeOrOptions\n      };\n    }\n\n    return this;\n  };\n  /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n   */\n\n\n  HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  };\n  /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n   */\n\n\n  HubConnectionBuilder.prototype.build = function () {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    var httpConnectionOptions = this.httpConnectionOptions || {}; // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    } // Now create the connection\n\n\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n\n    var connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol());\n  };\n\n  return HubConnectionBuilder;\n}();\n\nexport { HubConnectionBuilder };\n\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"names":["HttpConnection","HubConnection","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","HubConnectionBuilder","prototype","configureLogging","logging","isRequired","isLogger","logger","withUrl","url","transportTypeOrOptions","httpConnectionOptions","transport","withHubProtocol","protocol","build","undefined","Error","connection","create","instance","log"],"sources":["C:/Users/LENOVO/Desktop/Eltizam/Projects/SignalR Pro/sgnlrClient/node_modules/@aspnet/signalr/dist/esm/HubConnectionBuilder.js"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\r\nvar HubConnectionBuilder = /** @class */ (function () {\r\n    function HubConnectionBuilder() {\r\n    }\r\n    HubConnectionBuilder.prototype.configureLogging = function (logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    };\r\n    HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = transportTypeOrOptions;\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    };\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    };\r\n    /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n     */\r\n    HubConnectionBuilder.prototype.build = function () {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        var httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        var connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol());\r\n    };\r\n    return HubConnectionBuilder;\r\n}());\r\nexport { HubConnectionBuilder };\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,GAAT,EAAcC,aAAd,QAAmC,SAAnC;AACA;;AACA,IAAIC,oBAAoB;AAAG;AAAe,YAAY;EAClD,SAASA,oBAAT,GAAgC,CAC/B;;EACDA,oBAAoB,CAACC,SAArB,CAA+BC,gBAA/B,GAAkD,UAAUC,OAAV,EAAmB;IACjEL,GAAG,CAACM,UAAJ,CAAeD,OAAf,EAAwB,SAAxB;;IACA,IAAIE,QAAQ,CAACF,OAAD,CAAZ,EAAuB;MACnB,KAAKG,MAAL,GAAcH,OAAd;IACH,CAFD,MAGK;MACD,KAAKG,MAAL,GAAc,IAAIP,aAAJ,CAAkBI,OAAlB,CAAd;IACH;;IACD,OAAO,IAAP;EACH,CATD;;EAUAH,oBAAoB,CAACC,SAArB,CAA+BM,OAA/B,GAAyC,UAAUC,GAAV,EAAeC,sBAAf,EAAuC;IAC5EX,GAAG,CAACM,UAAJ,CAAeI,GAAf,EAAoB,KAApB;IACA,KAAKA,GAAL,GAAWA,GAAX,CAF4E,CAG5E;IACA;;IACA,IAAI,OAAOC,sBAAP,KAAkC,QAAtC,EAAgD;MAC5C,KAAKC,qBAAL,GAA6BD,sBAA7B;IACH,CAFD,MAGK;MACD,KAAKC,qBAAL,GAA6B;QACzBC,SAAS,EAAEF;MADc,CAA7B;IAGH;;IACD,OAAO,IAAP;EACH,CAdD;EAeA;AACJ;AACA;AACA;;;EACIT,oBAAoB,CAACC,SAArB,CAA+BW,eAA/B,GAAiD,UAAUC,QAAV,EAAoB;IACjEf,GAAG,CAACM,UAAJ,CAAeS,QAAf,EAAyB,UAAzB;IACA,KAAKA,QAAL,GAAgBA,QAAhB;IACA,OAAO,IAAP;EACH,CAJD;EAKA;AACJ;AACA;AACA;;;EACIb,oBAAoB,CAACC,SAArB,CAA+Ba,KAA/B,GAAuC,YAAY;IAC/C;IACA;IACA,IAAIJ,qBAAqB,GAAG,KAAKA,qBAAL,IAA8B,EAA1D,CAH+C,CAI/C;;IACA,IAAIA,qBAAqB,CAACJ,MAAtB,KAAiCS,SAArC,EAAgD;MAC5C;MACAL,qBAAqB,CAACJ,MAAtB,GAA+B,KAAKA,MAApC;IACH,CAR8C,CAS/C;;;IACA,IAAI,CAAC,KAAKE,GAAV,EAAe;MACX,MAAM,IAAIQ,KAAJ,CAAU,0FAAV,CAAN;IACH;;IACD,IAAIC,UAAU,GAAG,IAAIvB,cAAJ,CAAmB,KAAKc,GAAxB,EAA6BE,qBAA7B,CAAjB;IACA,OAAOf,aAAa,CAACuB,MAAd,CAAqBD,UAArB,EAAiC,KAAKX,MAAL,IAAeT,UAAU,CAACsB,QAA3D,EAAqE,KAAKN,QAAL,IAAiB,IAAIjB,eAAJ,EAAtF,CAAP;EACH,CAfD;;EAgBA,OAAOI,oBAAP;AACH,CA1DyC,EAA1C;;AA2DA,SAASA,oBAAT;;AACA,SAASK,QAAT,CAAkBC,MAAlB,EAA0B;EACtB,OAAOA,MAAM,CAACc,GAAP,KAAeL,SAAtB;AACH"},"metadata":{},"sourceType":"module"}