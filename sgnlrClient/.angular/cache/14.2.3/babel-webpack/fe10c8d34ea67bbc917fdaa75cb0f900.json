{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { NullLogger } from \"./Loggers\";\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nvar JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\n\nvar JsonHubProtocol =\n/** @class */\nfunction () {\n  function JsonHubProtocol() {\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n\n    this.version = 1;\n    /** @inheritDoc */\n\n    this.transferFormat = TransferFormat.Text;\n  }\n  /** Creates an array of {@link @aspnet/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n\n\n  JsonHubProtocol.prototype.parseMessages = function (input, logger) {\n    // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n    if (typeof input !== \"string\") {\n      throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n    }\n\n    if (!input) {\n      return [];\n    }\n\n    if (logger === null) {\n      logger = NullLogger.instance;\n    } // Parse the messages\n\n\n    var messages = TextMessageFormat.parse(input);\n    var hubMessages = [];\n\n    for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n      var message = messages_1[_i];\n      var parsedMessage = JSON.parse(message);\n\n      if (typeof parsedMessage.type !== \"number\") {\n        throw new Error(\"Invalid payload.\");\n      }\n\n      switch (parsedMessage.type) {\n        case MessageType.Invocation:\n          this.isInvocationMessage(parsedMessage);\n          break;\n\n        case MessageType.StreamItem:\n          this.isStreamItemMessage(parsedMessage);\n          break;\n\n        case MessageType.Completion:\n          this.isCompletionMessage(parsedMessage);\n          break;\n\n        case MessageType.Ping:\n          // Single value, no need to validate\n          break;\n\n        case MessageType.Close:\n          // All optional values, no need to validate\n          break;\n\n        default:\n          // Future protocol changes can add message types, old clients can ignore them\n          logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n          continue;\n      }\n\n      hubMessages.push(parsedMessage);\n    }\n\n    return hubMessages;\n  };\n  /** Writes the specified {@link @aspnet/signalr.HubMessage} to a string and returns it.\r\n   *\r\n   * @param {HubMessage} message The message to write.\r\n   * @returns {string} A string containing the serialized representation of the message.\r\n   */\n\n\n  JsonHubProtocol.prototype.writeMessage = function (message) {\n    return TextMessageFormat.write(JSON.stringify(message));\n  };\n\n  JsonHubProtocol.prototype.isInvocationMessage = function (message) {\n    this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n\n    if (message.invocationId !== undefined) {\n      this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n    }\n  };\n\n  JsonHubProtocol.prototype.isStreamItemMessage = function (message) {\n    this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n\n    if (message.item === undefined) {\n      throw new Error(\"Invalid payload for StreamItem message.\");\n    }\n  };\n\n  JsonHubProtocol.prototype.isCompletionMessage = function (message) {\n    if (message.result && message.error) {\n      throw new Error(\"Invalid payload for Completion message.\");\n    }\n\n    if (!message.result && message.error) {\n      this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n    }\n\n    this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n  };\n\n  JsonHubProtocol.prototype.assertNotEmptyString = function (value, errorMessage) {\n    if (typeof value !== \"string\" || value === \"\") {\n      throw new Error(errorMessage);\n    }\n  };\n\n  return JsonHubProtocol;\n}();\n\nexport { JsonHubProtocol };","map":{"version":3,"names":["MessageType","LogLevel","TransferFormat","NullLogger","TextMessageFormat","JSON_HUB_PROTOCOL_NAME","JsonHubProtocol","name","version","transferFormat","Text","prototype","parseMessages","input","logger","Error","instance","messages","parse","hubMessages","_i","messages_1","length","message","parsedMessage","JSON","type","Invocation","isInvocationMessage","StreamItem","isStreamItemMessage","Completion","isCompletionMessage","Ping","Close","log","Information","push","writeMessage","write","stringify","assertNotEmptyString","target","invocationId","undefined","item","result","error","value","errorMessage"],"sources":["C:/Users/LENOVO/Desktop/Eltizam/Projects/SignalR Pro/sgnlrClient/node_modules/@aspnet/signalr/dist/esm/JsonHubProtocol.js"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nvar JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nvar JsonHubProtocol = /** @class */ (function () {\r\n    function JsonHubProtocol() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 1;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @aspnet/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    JsonHubProtocol.prototype.parseMessages = function (input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        var messages = TextMessageFormat.parse(input);\r\n        var hubMessages = [];\r\n        for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\r\n            var message = messages_1[_i];\r\n            var parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    };\r\n    /** Writes the specified {@link @aspnet/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    JsonHubProtocol.prototype.writeMessage = function (message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    };\r\n    JsonHubProtocol.prototype.isInvocationMessage = function (message) {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    };\r\n    JsonHubProtocol.prototype.isStreamItemMessage = function (message) {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    };\r\n    JsonHubProtocol.prototype.isCompletionMessage = function (message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    };\r\n    JsonHubProtocol.prototype.assertNotEmptyString = function (value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    };\r\n    return JsonHubProtocol;\r\n}());\r\nexport { JsonHubProtocol };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}